@using System.Security.Claims
@using Domain.Entities
@model WebUI.ViewModels.Task.TaskRegionViewModel

@{
    ViewData["Title"] = "Task List";
}

@{
    bool isCoach = Context.User.IsInRole("Coach");
    string userId = Context.User.GetUserId();
}

<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript" src="https://www.google.com/jsapi"></script>

<style>
    svg > g > g > path {
        display: none;
    }

    svg > g > g > rect {
        display: none;
    }

    svg > g > g > g > text {
        display: none;
    }

    #toTasks {
        position: fixed;
        right: 55px;
        bottom: 40px;
    }
</style>

<div class="ui segments" id="mapDiv">

    @if (!isCoach)
    {
        <!--Google chart-->
        <div id="geochart-colors"></div>

        @*<a class="ui icon button large" id="toTasks" href="#tasks">
            <i class="dropdown icon"></i>
        </a>*@
    }

    @if (isCoach)
    {
        <div class="ui padded segment">
            <div id="AddTaskStepsButton" class="ui one column stackable center aligned page grid">
                <a class="ui positive button active" href="@Url.Action("AddTask", "Task", new {coachId =userId })">Add Task</a>
            </div>
        </div>
    }
    <div class="ui very padded segment" id="tasks">
        <div class="ui one column stackable center aligned page grid">
            <div class="ui tree stackable cards">

                @foreach (var item in Model.Tasks)
                {
                    string color = "";

                    switch (item.Status)
                    {
                        case Status.Open:
                            color = "green";
                            break;
                        case Status.Expired:
                            color = "red";
                            break;
                        case Status.Reopened:
                            color = "yellow";
                            break;
                        default:
                            color = "green";
                            break;
                    }

                    string size = "";
                    if (item.Coins < 2)
                    {
                        size = "tiny";
                    }
                    else if (item.Coins <= 10)
                    {
                        size = "small";
                    }
                    else if (item.Coins <= 50)
                    {
                        size = "";
                    }
                    else if (item.Coins > 50)
                    {
                        size = "large";
                    }

                    using (Html.BeginForm("ViewUserTask", "Task", new { taskId = item.Id }, FormMethod.Post, new { @class = color + " card" }))
                    {


                        <div class="content">
                            <span class="right floated star">
                                <i class="active star @size icon"></i>
                                <a class="floating ui yellow circular label">@Html.DisplayFor(m => item.Coins)</a>
                            </span>
                            <div class="header">
                                @Html.DisplayFor(m => item.Name)
                            </div>
                            @if (isCoach)
                            {
                                <div class="meta">
                                    @Html.DisplayFor(x => item.User.Name)
                                </div>
                            }

                        </div>
                        <div class="content">

                            <div class="ui small feed">
                                <div class="event">
                                    <div class="content">
                                        <span class="right floated time">

                                            @Html.DisplayFor(x => item.ExpireDt)
                                        </span>
                                        <div class="ui @color horizontal label">
                                            @Html.DisplayFor(x => item.Status)
                                        </div>

                                    </div>
                                </div>

                            </div>
                        </div>


                        <button type="submit" class="ui bottom attached button">

                            <i class="zoom icon"></i>
                            View
                        </button>
                    }
                }
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script>
        google.charts.load('current', { 'packages': ['geochart'] });
        google.charts.setOnLoadCallback(drawRegionsMap);

        var regions = {
            NorthAmerica: { code: '021', color: 'green' },
            SouthAmerica: { code: '005', color: '#FFA703' },
            Africa: { code: '002', color: 'yellow' },
            Europe: { code: '150', color: '#07B6F0' },
            Australia: { code: '009', color: 'red' },
            NorthAsia: { code: '151', color: '#ED6F2F' },
            NearEast: { code: '145', color: '#A509AB' },
            SouthAsia: { code: '030', color: '#060CBF' }
        };

        var currentRegion = regions['@Model.Region.ToString()'].code;
        var regionColor = regions['@Model.Region.ToString()'].color;

        var dataArray = [['Country', 'Coins']];

        @foreach (var t in Model.Tasks)
        {
            @:dataArray.push(['@t.Country', @t.Coins]);
        }

        function drawRegionsMap() {
            var data = google.visualization.arrayToDataTable(dataArray);

            var options = {
                region: currentRegion,
                displayMode: 'markers',
                backgroundColor: 'transparent',
                datalessRegionColor: regionColor,
                defaultRegionColor: '#00ffff',
                defaultColor: '#f5f5f5',
                keepAspectRation: false,
                tooltip: {
                    trigger: 'focus'
                },
                colorAxis: {
                    colors: ['green', '#FFA703']
                }
            };

            var chart = new google.visualization.GeoChart(document.getElementById('geochart-colors'));
            chart.draw(data, options);
            google.visualization.events.addListener(chart, 'regionClick', mapClick);

            function mapClick(e) {

            }
        };
    </script>
}