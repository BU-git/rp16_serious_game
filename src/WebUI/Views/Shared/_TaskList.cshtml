@using System.Security.Claims
@using Domain.Entities
@model WebUI.ViewModels.Task.TaskListViewModel

@{
    bool isCoach = Context.User.IsInRole("Coach");
    string userId = Context.User.GetUserId();

}


<div class="ui very padded segment">


        <div class="ui one column stackable center aligned page grid">
            <div class="ui tree stackable cards">

                @foreach (var item in Model.UserTasks)
            {
                string color = "";

                switch (item.Status)
                {
                    case Status.Open:
                        color = "green";
                        break;
                    case Status.Expired:
                        color = "red";
                        break;
                    case Status.Reopened:
                        color = "yellow";
                        break;
                    default:
                        color = "green";
                        break;
                }

                string size = "";
                if (item.Coins < 2)
                {
                    size = "tiny";
                }
                else if (item.Coins <= 10)
                {
                    size = "small";
                }
                else if (item.Coins <= 50)
                {
                    size = "";
                }
                else if (item.Coins > 50)
                {
                    size = "large";
                }

                using (Html.BeginForm("ViewUserTask", "Task", new { taskId = item.UserTaskId }, FormMethod.Post, new { @class = color + " card" }))
                {
                        <div class="content">
                            <span class="right floated star">
                                <i class="active star @size icon"></i>
                                <a class="floating ui yellow circular label">@Html.DisplayFor(m => item.Coins)</a>
                            </span>
                            <div class="header">
                                @Html.DisplayFor(m => item.Name)
                            </div>
                            @if (isCoach)
                            {
                                <div class="meta">
                                    @Html.DisplayFor(x => item.UserName)
                                </div>
                            }
                        </div>
                        <div class="content">
                            <div class="ui small feed">
                                <div class="event">
                                    <div class="content">
                                        <span class="right floated time">
                                            @Html.DisplayFor(x => item.ExpireDt)
                                        </span>
                                        <div class="ui @color horizontal label">
                                            @Html.DisplayFor(x => item.Status)
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <button type="submit" class="ui bottom attached button">
                            <i class="zoom icon"></i>
                            View
                        </button>
                    }
                }
            </div>
        </div>
    </div>

